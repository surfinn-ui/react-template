import {
  flow,
  Instance,
  SnapshotIn,
  SnapshotOut,
  types,
} from 'mobx-state-tree';
import { withSetPropAction } from '../withSetPropAction';
import {
  TSearchResult,
  TFindResult,
  TCreateResult,
  TUpdateResult,
  TPartialUpdateResult,
  TDeleteResult,
} from '../../services/api';
import { petApi } from '../../services/api/pet/PetApi';
import { FetchStates, withFetchStates } from '../withFetchStates';
import { withPagination, IPagination } from '../withPagination';
import { IPetModel } from '../pet/PetModel';
import { IApiResponseModel } from '../apiResponse/ApiResponseModel';

const PetStoreProps = {
  // Add Store Properties
  // ^ Store Properties generated by openapi-generator
  // $ Store Properties generated by openapi-generator
};

/**
 * Store description here for TypeScript hints.
 */
export const PetStore = types
  .model('PetStore', PetStoreProps)
  .extend(withFetchStates) // Fetch State
  .extend(withPagination) // Pagination Information
  .actions(withSetPropAction) // Set Property Action
  // DATA FORMATTED VIEWS
  .views((self) => {
    // Custom Views

    return {
      // Expose Data Formatted Views
    };
  })
  // CUSTOM ACTIONS
  .actions((self) => {
    // Custom Actions
    return {
      // Expose Custom Actions
    };
  })
  // GENERATED ACTIONS
  .actions((self) => {
    // ^ Actions generated by openapi-generator

    /**
     * ## uploads an image
     *
     * @tags `pet`
     * @param {number} petId **REQUIRED** (int64) ID of pet to update
     * @param {string} additionalMetadata   Additional Metadata
     * @param {any} payload  {any}
     */
    const uploadFile = flow(function* (
      petId: number,
      additionalMetadata: string,
      payload: any,
    ) {
      if (self.isPending) return;
      self.pending();
      const result = yield petApi.uploadFile(
        petId,
        additionalMetadata,
        payload,
      );
      if (result.kind === 'ok') {
        const data = result.data as IApiResponseModel;
        // TODO - TRANSLATE RESPONSE TO STORE

        // --------------------------------------------------------------------
        console.log('uploadFile()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESULT TO STORE uploadFile()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(result);
        console.error(JSON.stringify(result, null, 2));
      }
    });

    /**
     * ## Find pet by ID
     * Returns a single pet
     * @tags `pet`
     * @param {number} petId **REQUIRED** (int64) ID of pet to return
     */
    const getPetById = flow(function* (petId: number) {
      if (self.isPending) return;
      self.pending();
      const result = yield petApi.getPetById(petId);
      if (result.kind === 'ok') {
        const data = result.data as IPetModel;
        // TODO - TRANSLATE RESPONSE TO STORE

        // --------------------------------------------------------------------
        console.log('getPetById()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESULT TO STORE getPetById()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(result);
        console.error(JSON.stringify(result, null, 2));
      }
    });

    /**
     * ## Updates a pet in the store with form data
     *
     * @tags `pet`
     * @param {number} petId **REQUIRED** (int64) ID of pet that needs to be updated
     * @param {string} name   Name of pet that needs to be updated
     * @param {string} status   Status of pet that needs to be updated
     */
    const updatePetWithForm = flow(function* (
      petId: number,
      name: string,
      status: string,
    ) {
      if (self.isPending) return;
      self.pending();
      const result = yield petApi.updatePetWithForm(petId, name, status);
      if (result.kind === 'ok') {
        const data = result.data as any;
        // TODO - TRANSLATE RESPONSE TO STORE

        // --------------------------------------------------------------------
        console.log('updatePetWithForm()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESULT TO STORE updatePetWithForm()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(result);
        console.error(JSON.stringify(result, null, 2));
      }
    });

    /**
     * ## Deletes a pet
     * delete a pet
     * @tags `pet`
     * @param {number} petId **REQUIRED** (int64) Pet id to delete
     */
    const deletePet = flow(function* (petId: number) {
      if (self.isPending) return;
      self.pending();
      const result = yield petApi.deletePet(petId);
      if (result.kind === 'ok') {
        const data = result.data as any;
        // TODO - TRANSLATE RESPONSE TO STORE

        // --------------------------------------------------------------------
        console.log('deletePet()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESULT TO STORE deletePet()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(result);
        console.error(JSON.stringify(result, null, 2));
      }
    });

    /**
     * ## Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @tags `pet`
     * @param {string[]} tags   Tags to filter by
     */
    const findPetsByTags = flow(function* (tags: string[]) {
      if (self.isPending) return;
      self.pending();
      const result = yield petApi.findPetsByTags(tags);
      if (result.kind === 'ok') {
        const data = result.data as IPetModel[];
        // TODO - TRANSLATE RESPONSE TO STORE

        // --------------------------------------------------------------------
        console.log('findPetsByTags()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESULT TO STORE findPetsByTags()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(result);
        console.error(JSON.stringify(result, null, 2));
      }
    });

    /**
     * ## Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @tags `pet`
     * @param {string} status   Status values that need to be considered for filter
     */
    const findPetsByStatus = flow(function* (status: string) {
      if (self.isPending) return;
      self.pending();
      const result = yield petApi.findPetsByStatus(status);
      if (result.kind === 'ok') {
        const data = result.data as IPetModel[];
        // TODO - TRANSLATE RESPONSE TO STORE

        // --------------------------------------------------------------------
        console.log('findPetsByStatus()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESULT TO STORE findPetsByStatus()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(result);
        console.error(JSON.stringify(result, null, 2));
      }
    });

    /**
     * ## Update an existing pet
     * Update an existing pet by Id
     * @tags `pet`
     * @param {any} payload **REQUIRED** {any} Update an existent pet in the store
     */
    const updatePet = flow(function* (payload: any) {
      if (self.isPending) return;
      self.pending();
      const result = yield petApi.updatePet(payload);
      if (result.kind === 'ok') {
        const data = result.data as IPetModel;
        // TODO - TRANSLATE RESPONSE TO STORE

        // --------------------------------------------------------------------
        console.log('updatePet()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESULT TO STORE updatePet()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(result);
        console.error(JSON.stringify(result, null, 2));
      }
    });

    /**
     * ## Add a new pet to the store
     * Add a new pet to the store
     * @tags `pet`
     * @param {any} payload **REQUIRED** {any} Create a new pet in the store
     */
    const addPet = flow(function* (payload: any) {
      if (self.isPending) return;
      self.pending();
      const result = yield petApi.addPet(payload);
      if (result.kind === 'ok') {
        const data = result.data as IPetModel;
        // TODO - TRANSLATE RESPONSE TO STORE

        // --------------------------------------------------------------------
        console.log('addPet()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESULT TO STORE addPet()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(result);
        console.error(JSON.stringify(result, null, 2));
      }
    });
    // $ Actions generated by openapi-generator
    return {
      // ^ Expose actions generated by openapi-generator
      uploadFile,
      getPetById,
      updatePetWithForm,
      deletePet,
      findPetsByTags,
      findPetsByStatus,
      updatePet,
      addPet,
      // $ Expose actions generated by openapi-generator
    };
  });

export interface IPetStore extends Instance<typeof PetStore> {}
export interface IPetSnapshotOut extends SnapshotOut<typeof PetStore> {}
export interface IPetStoreSnapshotIn extends SnapshotIn<typeof PetStore> {}
export type TPetStorePropKeys = keyof IPetStoreSnapshotIn & string;
