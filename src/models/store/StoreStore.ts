import {
  flow,
  Instance,
  SnapshotIn,
  SnapshotOut,
  types,
} from 'mobx-state-tree';
import { withSetPropAction } from '../withSetPropAction';
import {
  TSearchResult,
  TFindResult,
  TCreateResult,
  TUpdateResult,
  TPartialUpdateResult,
  TDeleteResult,
} from '@/services/api';
import { storeApi } from '@/services/api/store/StoreApi';
import { FetchStates, withFetchStates } from '../withFetchStates';
import { withPagination, IPagination } from '../withPagination';
import { IOrderModel } from '../order/OrderModel';

const StoreStoreProps = {
  // Add Store Properties
  // ^ Store Properties generated by openapi-generator
  // $ Store Properties generated by openapi-generator
};

/**
 * Store description here for TypeScript hints.
 */
export const StoreStore = types
  .model('StoreStore', StoreStoreProps)
  .extend(withFetchStates) // Fetch State
  .extend(withPagination) // Pagination Information
  .actions(withSetPropAction) // Set Property Action
  // DATA FORMATTED VIEWS
  .views((self) => {
    // Custom Views

    return {
      // Expose Data Formatted Views
    };
  })
  // CUSTOM ACTIONS
  .actions((self) => {
    // Custom Actions
    return {
      // Expose Custom Actions
    };
  })
  // GENERATED ACTIONS
  .actions((self) => {
    // ^ Actions generated by openapi-generator

    /**
     * ## Find purchase order by ID
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     * @tags `store`
     * @param {number} orderId **REQUIRED** (int64) ID of order that needs to be fetched
     */
    const getOrderById = flow(function* (orderId: number) {
      if (self.isPending) return;
      self.pending();
      const response = yield storeApi.getOrderById(orderId);
      if (response.kind === 'ok') {
        // TODO - TRANSLATE RESPONSE TO STORE
        const data = response.data.data as IOrderModel;

        // --------------------------------------------------------------------
        console.log('getOrderById()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESPONSE TO STORE getOrderById()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(response);
        console.error(JSON.stringify(response, null, 2));
      }
    });

    /**
     * ## Delete purchase order by ID
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     * @tags `store`
     * @param {number} orderId **REQUIRED** (int64) ID of the order that needs to be deleted
     */
    const deleteOrder = flow(function* (orderId: number) {
      if (self.isPending) return;
      self.pending();
      const response = yield storeApi.deleteOrder(orderId);
      if (response.kind === 'ok') {
        // TODO - TRANSLATE RESPONSE TO STORE
        const data = response.data.data as null;

        // --------------------------------------------------------------------
        console.log('deleteOrder()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESPONSE TO STORE deleteOrder()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(response);
        console.error(JSON.stringify(response, null, 2));
      }
    });

    /**
     * ## Place an order for a pet
     * Place a new order in the store
     * @tags `store`
     * @param {any} payload  {any}
     */
    const placeOrder = flow(function* (payload: any) {
      if (self.isPending) return;
      self.pending();
      const response = yield storeApi.placeOrder(payload);
      if (response.kind === 'ok') {
        // TODO - TRANSLATE RESPONSE TO STORE
        const data = response.data.data as IOrderModel;

        // --------------------------------------------------------------------
        console.log('placeOrder()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESPONSE TO STORE placeOrder()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(response);
        console.error(JSON.stringify(response, null, 2));
      }
    });

    /**
     * ## Returns pet inventories by status
     * Returns a map of status codes to quantities
     * @tags `store`
     *
     */
    const getInventory = flow(function* () {
      if (self.isPending) return;
      self.pending();
      const response = yield storeApi.getInventory();
      if (response.kind === 'ok') {
        // TODO - TRANSLATE RESPONSE TO STORE
        const data = response.data.data as null;

        // --------------------------------------------------------------------
        console.log('getInventory()', JSON.stringify(data, null, 2));
        throw new Error('TODO - TRANSLATE RESPONSE TO STORE getInventory()');
        // --------------------------------------------------------------------

        self.done();
      } else {
        self.error(response);
        console.error(JSON.stringify(response, null, 2));
      }
    });
    // $ Actions generated by openapi-generator
    return {
      // ^ Expose actions generated by openapi-generator
      getOrderById,
      deleteOrder,
      placeOrder,
      getInventory,
      // $ Expose actions generated by openapi-generator
    };
  });

export interface IStoreStore extends Instance<typeof StoreStore> {}
export interface IStoreSnapshotOut extends SnapshotOut<typeof StoreStore> {}
export interface IStoreStoreSnapshotIn extends SnapshotIn<typeof StoreStore> {}
export type TStoreStorePropKeys = keyof IStoreStoreSnapshotIn & string;
