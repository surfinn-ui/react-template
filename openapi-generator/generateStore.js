const series = require('async').series;
const { exec } = require('child_process');
const jsonpath = require('jsonpath');
const fs = require('fs');
const {
  convertDataType,
  isResponseTypeArray,
  returnType,
  toCamelCase,
  toPascalCase,
  format,
  getTagNames,
  getPaths,
  getSchemasFromComponents,
} = require('./utils');

/**
 * generate store
 *
 * @param {*} document
 * @param {*} callback
 */
function generateStores(document, callback) {
  const tagNames = getTagNames(document);
  const generators = [];
  tagNames.forEach((tagName) => {
    if (fs.existsSync(getStoreFilePath(tagName))) {
      console.log('Store already exists', tagName);
    } else {
      generators.push((callback) => {
        console.log(
          'Since the store does not exist, we create a store named: ',
          tagName,
        );
        try {
          exec(`yarn gen "store" "${tagName}"`, callback);
        } catch (e) {
          console.log('ERROR', e);
          callback();
        }
      });
    }
  });

  // Clear generated actions
  tagNames.forEach((tagName) => {
    generators.push((callback) => {
      console.log('CLEAR Store ', tagName);
      clearStoreFile(tagName, callback);
    });
  });

  // Add generated actions
  tagNames.forEach((tagName) => {
    getPathsByTag(document, tagName).forEach((node) => {
      const path = node.path.pop();
      const object = node.value;
      generators.push((callback) => {
        try {
          addActionsToStore(tagName, path, object, callback);
        } catch (e) {
          console.log('ERROR', e);
          callback();
        }
      });
    });
  });

  // Add exposes generated actions
  tagNames.forEach((tagName) => {
    getPathsByTag(document, tagName).forEach((node) => {
      const path = node.path.pop();
      const object = node.value;
      generators.push((callback) => {
        try {
          exposeActionsToStore(tagName, path, object, callback);
        } catch (e) {
          console.log('ERROR', e);
          callback();
        }
      });
    });
  });

  series(generators, callback);
}

module.exports = {
  generateStores,
};

function getStoreFilePath(tagName) {
  return `./src/models/${toCamelCase(tagName)}/${toPascalCase(
    tagName,
  )}Store.ts`;
}

function clearStoreFile(tagName, callback) {
  const filepath = getStoreFilePath(tagName);
  fs.readFile(filepath, 'utf8', (err, file) => {
    if (err) {
      callback();
    } else {
      let codeLines = [];
      codeLines = file.toString().split('\n');

      // remove actions
      let startIndex = codeLines.findLastIndex((line) =>
        line.endsWith(`// ^ Actions generated by openapi-generator`),
      );
      let endIndex = codeLines.findLastIndex((line) =>
        line.endsWith(`// $ Actions generated by openapi-generator`),
      );
      codeLines.splice(startIndex + 1, endIndex - startIndex - 1);

      // remove expose actions
      startIndex = codeLines.findLastIndex((line) =>
        line.endsWith(`// ^ Expose actions generated by openapi-generator`),
      );
      endIndex = codeLines.findLastIndex((line) =>
        line.endsWith(`// $ Expose actions generated by openapi-generator`),
      );
      codeLines.splice(startIndex + 1, endIndex - startIndex - 1);

      fs.writeFile(filepath, codeLines.join('\n'), () => {
        console.log('write', filepath);
        callback();
      });
    }
  });
}

function getPathsByTag(api, tag) {
  return getPaths(api).filter((node) => {
    const object = node.value;
    return jsonpath.query(object, '$..tags[0]')[0] === tag;
  });
}

function addActionsToStore(tagName, path, object, callback) {
  const filepath = getStoreFilePath(tagName);

  fs.readFile(filepath, 'utf8', (err, data) => {
    if (err) {
      console.log(err);
      callback();
      return;
    }

    let codeLines = data.split('\n');

    const startIndex = codeLines.findIndex((line) =>
      line.includes('// ^ Actions generated by openapi-generator'),
    );

    codeLines.splice(startIndex + 1, 0, getActionCodes(path, object));

    fs.writeFile(filepath, codeLines.join('\n'), () => {
      console.log('write', filepath);
      callback();
    });
  });
}

function getActionCodes(path, object) {
  return Object.keys(object)
    .map((method) => {
      // console.log('getActionCodes', path, method);
      const pathInfo = object[method];
      const operationId = toCamelCase(pathInfo.operationId);

      const parameters = parseParameters(pathInfo.parameters);
      // const options = parseOptions(pathInfo);
      const requestBody = parseRequestBody(pathInfo.requestBody);
      const responses = parseResponses(pathInfo.responses);

      return `

    /**
     * ## ${pathInfo.summary}
     * ${pathInfo.description}
     * @tags ${pathInfo.tags ? `\`${pathInfo.tags.join(', ')}\`` : ''}
     * ${[].concat(parameters.paramDocs, requestBody.docs).join('\n     * ')}
     */
    const ${operationId} = flow(function* (${parameters.paramArgs
        .concat(requestBody.payload)
        .map((i) => i.join(': '))
        .join(', ')} 
    ) {
      if(self.isPending) return;
      self.pending();
      const response = yield ${toCamelCase(
        pathInfo.tags[0],
      )}Api.${operationId}(${[]
        .concat(parameters.paramArgs, requestBody.payload)
        .map((i) => i[0])
        .join(', ')});
      if (response.kind === 'ok') {
        self.done();
        return response.data.data as ${'any'};
      } else {
        self.error(response);
        console.error(response.kind);
      }
    });`;
    })
    .join('\n\n');
}

function parseParameters(params) {
  const paramDocs = [];
  const paramArgs = [];
  console.log(params);
  params &&
    params
      .filter((p) => p.in === 'path' || p.in === 'query')
      .forEach((p) => {
        const name = toCamelCase(p.name);
        const type = convertDataType(p.schema);
        const format = p.schema.format ? `(${p.schema.format})` : '';
        const required = p.required ? '**REQUIRED**' : '';
        const description = p.description || '';
        paramDocs.push(
          `@param {${type}} ${name} ${required} ${format} ${description}`,
        );
        if (p.in === 'path' || p.in === 'query') {
          paramArgs.push([`${name}`, `${type}`]);
        }
      });

  return {
    paramDocs,
    paramArgs,
  };
}

// TODO: implement
// TODO: implement
// TODO: implement
// TODO: implement
// TODO: implement
// TODO: implement
// TODO: implement
function parseRequestBody(requestBody) {
  const docs = [];
  const payload = [];
  if (requestBody) {
    const required = requestBody.required ? '**REQUIRED**' : '';
    const description = requestBody.description || '';

    const contentType = Object.keys(requestBody).includes('application/json')
      ? 'application/json'
      : Object.keys(requestBody.content)[0];

    // const type = contentType
    //   ? convertDataType(requestBody.content[contentType].schema)
    //   : 'any';
    // const format = `{${type}}`;
    const type = 'any';
    const format = `{any}`;

    docs.push(
      ['@param', `{${type}}`, 'payload', required, format, description].join(
        ' ',
      ),
    );
    payload.push(['payload', type]);
  }
  return {
    docs,
    payload,
  };
}

function parseResponses(params) {
  const dataDocs = [];
  const data = [];
  const responses = params && params.responses?.content;

  return {
    dataDocs,
    data,
  };
}




/**
 * Expose actions to store
 * 
 * @param {*} tagName 
 * @param {*} path 
 * @param {*} object 
 * @param {*} callback 
 */
function exposeActionsToStore(tagName, path, object, callback) {
  const filepath = getStoreFilePath(tagName);

  fs.readFile(filepath, 'utf8', (err, data) => {
    if (err) {
      console.log(err);
      callback();
      return;
    }
    let codeLines = data.split('\n');
    const startIndex = codeLines.findIndex((line) =>
      line.includes('// ^ Expose actions generated by openapi-generator'),
    );

    const endIndex = codeLines.findIndex((line) =>
      line.includes('// $ Expose actions generated by openapi-generator'),
    );

    codeLines.splice(
      startIndex + 1,
      0,
      Object.keys(object)
        .map((method) => toCamelCase(object[method].operationId))
        .join(',\n') + ',',
    );

    fs.writeFile(filepath, codeLines.join('\n'), () => {
      console.log('write', filepath);
      callback();
    });
  });
}
